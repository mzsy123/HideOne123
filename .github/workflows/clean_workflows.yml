name: Clean Workflows

on:
  workflow_dispatch:
    inputs:
      workflow_name:
        type: choice
        description: '清理的工作流名称'
        required: true
        default: 'Build and Release'
        options:
          - Build and Release
          - Sync Compressed File
          - Clean Workflows
      count:
        description: '最多清理的运行次数'
        required: false
        default: '20'
      delete_failed:
        description: '是否删除失败的运行记录'
        required: false
        type: boolean
        default: true
      delete_success:
        description: '是否删除成功的运行记录'
        required: false
        type: boolean
        default: false
      delete_cancelled:
        description: '是否删除已取消的运行记录'
        required: false
        type: boolean
        default: true
      reverse_order:
        description: '是否从旧到新开始清理'
        required: false
        type: boolean
        default: true

permissions:
  actions: write  # 必须赋予删除运行记录的权限

jobs:
  cleanup:
    runs-on: ubuntu-latest
    steps:
      - name: 安装 GitHub CLI 和 jq
        run: |
          sudo apt-get update
          sudo apt-get install -y gh jq

      - name: 认证 GitHub CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: 清理指定工作流及本工作流运行记录
        env:
          REPO: ${{ github.repository }}
          COUNT: ${{ inputs.count }}
          DELETE_FAILED: ${{ inputs.delete_failed }}
          DELETE_SUCCESS: ${{ inputs.delete_success }}
          DELETE_CANCELLED: ${{ inputs.delete_cancelled }}
          REVERSE_ORDER: ${{ inputs.reverse_order }}
          WORKFLOW_NAME: ${{ inputs.workflow_name }}
          CURRENT_RUN_ID: ${{ github.run_id }}
        run: |
          set -euo pipefail  # 严格模式：变量未定义/管道失败即退出
          set -x             # 调试模式：打印每一步执行的命令

          # ======================== 1. 获取目标工作流 ID ========================
          WORKFLOW_ID=$(gh api "repos/$REPO/actions/workflows" \
            | jq -r --arg name "$WORKFLOW_NAME" '.workflows[] | select(.name == $name) | .id')
          if [[ -z "$WORKFLOW_ID" ]]; then
            echo "错误：未找到工作流 \"$WORKFLOW_NAME\""
            exit 1
          fi
          echo "✅ 目标工作流 ID：$WORKFLOW_ID"

          # ======================== 2. 分页获取所有运行记录 ========================
          PER_PAGE=100
          PAGE=1
          MATCHED_RUNS="[]"  # 初始化为空数组
          while true; do
            RESP=$(gh api "repos/$REPO/actions/workflows/$WORKFLOW_ID/runs?per_page=$PER_PAGE&page=$PAGE")
            RUNS=$(echo "$RESP" | jq '.workflow_runs')
            COUNT_THIS_PAGE=$(echo "$RUNS" | jq 'length')

            if [[ $COUNT_THIS_PAGE -eq 0 ]]; then
              break  # 无更多记录，退出循环
            fi

            # 合并数组：将当前页数据追加到 MATCHED_RUNS
            MATCHED_RUNS=$(jq -s 'add' <(echo "$MATCHED_RUNS") <(echo "$RUNS"))
            PAGE=$((PAGE + 1))
          done
          TOTAL_RUNS=$(echo "$MATCHED_RUNS" | jq 'length')
          echo "共获取到 $TOTAL_RUNS 条运行记录"

          # ======================== 3. 排序和截取 ========================
          # 排序：旧→新（reverse_order=true）或 新→旧（reverse_order=false）
          if [[ "$REVERSE_ORDER" == "true" ]]; then
            SORTED_RUNS=$(echo "$MATCHED_RUNS" | jq 'sort_by(.run_started_at)')
          else
            SORTED_RUNS=$(echo "$MATCHED_RUNS" | jq 'sort_by(.run_started_at) | reverse')
          fi

          # 截取前 COUNT 条（COUNT 为输入参数）
          TO_DELETE_RUNS=$(echo "$SORTED_RUNS" | jq ".[0:${COUNT}]")

          # ======================== 4. 遍历删除符合条件的记录 ========================
          echo "$TO_DELETE_RUNS" | jq -c '.[]' | while read -r run; do
            RUN_ID=$(echo "$run" | jq -r '.id')
            STATUS=$(echo "$run" | jq -r '.conclusion')  # success/failure/cancelled
            STATE=$(echo "$run" | jq -r '.status')      # in_progress/queued/completed

            # 跳过「进行中」或「排队中」的任务
            if [[ "$STATE" == "in_progress" || "$STATE" == "queued" ]]; then
              echo "⚠️ 跳过运行 $RUN_ID（状态：$STATE）"
              continue
            fi

            # 根据配置判断是否删除
            if [[ "$STATUS" == "failure" && "$DELETE_FAILED" != "true" ]]; then
              echo "ℹ️ 跳过失败记录 $RUN_ID（DELETE_FAILED=false）"
              continue
            fi
            if [[ "$STATUS" == "success" && "$DELETE_SUCCESS" != "true" ]]; then
              echo "ℹ️ 跳过成功记录 $RUN_ID（DELETE_SUCCESS=false）
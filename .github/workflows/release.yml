name: Build and Release

on:
  push:
    tags:
      - 'v*'  # 仅推送以v开头的标签（如v1.0.0）时触发

jobs:
  build-and-release:
    runs-on: ubuntu-latest  # 使用最新版Ubuntu环境
    steps:
      - name: 检出完整代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 必须设置为0才能获取完整标签历史

      - name: 提取版本号
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        # 从标签引用（如refs/tags/v1.0.0）中提取版本号1.0.0

      - name: 创建临时打包目录
        run: mkdir -p release-dist

      - name: 同步仓库内容（排除特定目录）
        run: |
          rsync -av \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='release-dist' \
            --exclude='*.md' \  # 可根据需求添加更多排除项
            . release-dist/
        # 使用rsync同步文件，保留权限和时间戳

      - name: 压缩为ZIP文件
        run: zip -r "release-${{ steps.get_version.outputs.VERSION }}.zip" release-dist/
        # 生成带版本号的压缩包

      - name: 创建GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}  # 自动使用触发的标签名
          release_name: Release ${{ steps.get_version.outputs.VERSION }}
          body: |  # 可选的发布说明
            自动生成的版本发布
            - 包含仓库所有非排除文件
          draft: false  # 直接发布，不保存为草稿
          prerelease: false  # 标记为正式版本

      - name: 上传压缩包
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}  # 由create-release步骤提供
          asset_path: ./release-${{ steps.get_version.outputs.VERSION }}.zip
          asset_name: release-${{ steps.get_version.outputs.VERSION }}.zip
          asset_content_type: application/zip  # MIME类型需与文件类型匹配

      - name: 清理临时文件
        run: rm -rf release-dist

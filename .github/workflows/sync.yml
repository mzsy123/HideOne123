      - name: 同步到目标仓库
        uses: actions/github-script@v7
        env:
          TARGET_OWNER: "mzsy123"            # 目标仓库所有者
          TARGET_REPO: "mzsy123.github.io"   # 目标仓库名称
          TAG: ${{ steps.get_version.outputs.VERSION }}
          ASSET_PATH: "release-${{ steps.get_version.outputs.VERSION }}.zip"
          TARGET_PAT: ${{ secrets.TARGET_REPO_PAT }}  # 已配置的 PAT
        with:
          script: |
            const fs = require('fs').promises;
            // 无需手动 require('@actions/core')！GitHub Script 已内置 core 对象
            const octokit = require('@actions/github')({ token: process.env.TARGET_PAT });

            let release;
            try {
              // 查找目标仓库的 Release
              release = await octokit.rest.repos.getReleaseByTag({
                owner: process.env.TARGET_OWNER,
                repo: process.env.TARGET_REPO,
                tag: process.env.TAG
              });
            } catch (err) {
              if (err.status === 404) {
                // 不存在则创建
                release = await octokit.rest.repos.createRelease({
                  owner: process.env.TARGET_OWNER,
                  repo: process.env.TARGET_REPO,
                  tag_name: process.env.TAG,
                  name: `Sync from HideOne123: ${process.env.TAG}`,
                  body: "此版本自动从 HideOne123 同步发布",
                  draft: false,
                  prerelease: false
                });
              } else {
                core.setFailed(`创建 Release 失败：${err.message}`); // 直接使用内置 core
                return;
              }
            }

            try {
              const fileContent = await fs.readFile(process.env.ASSET_PATH);
              await octokit.rest.repos.uploadReleaseAsset({
                owner: process.env.TARGET_OWNER,
                repo: process.env.TARGET_REPO,
                release_id: release.data.id,
                name: process.env.ASSET_NAME,
                data: fileContent,
                headers: {
                  'content-type': 'application/zip',
                  'content-length': fileContent.length
                }
              });
              console.log("✅ 同步成功！");
            } catch (err) {
              core.setFailed(`上传资产失败：${err.message}`); // 直接使用内置 core
            }

name: Sync Release  # 工作流名称，可自定义
on:
  push:
    tags: ['v*']  # 标签触发（如 v1.0.0）
  workflow_dispatch:  # 手动触发入口
    inputs:
      version:
        description: '版本号（必须带 v 前缀，如 v1.0.0）'
        required: true
        default: 'v1.0.0'

jobs:
  cross-sync:
    runs-on: ubuntu-latest
    steps:
      ####################################################################
      # 1. 检出源仓库代码（必须步骤）
      ####################################################################
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 确保获取完整标签历史，支持版本号提取

      ####################################################################
      # 2. 提取并校验版本号（自动/手动触发兼容）
      ####################################################################
      - name: 提取版本号
        id: get_version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # 手动触发：强制校验版本号格式（必须带 v）
            if [[ "${{ github.event.inputs.version }}" != v* ]]; then
              echo "::error::版本号必须以 v 开头（如 v1.0.0）"
              exit 1
            fi
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            # 标签触发：从标签名提取版本号（如 refs/tags/v1.0.0 → v1.0.0）
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      ####################################################################
      # 3. 打包仓库（终极修复：绝对单行 + bash 强制 + 调试）
      ####################################################################
      - name: 打包仓库（确保无续行符问题）
        run: |
          echo "========== 当前目录文件列表（调试用） =========="
          ls -la  # 打印文件，确认代码已检出
          echo "========== 执行 zip 命令 =========="
          # 纯单行命令，无任何续行符！
          zip -r "release-${{ steps.get_version.outputs.VERSION }}.zip" . -x "*.git*" -x ".github/" -x "release-*.zip"
        shell: bash  # 强制用 bash 执行，彻底避免 sh 的解析问题

      ####################################################################
      # 4. 发布到源仓库的 Releases（当前仓库：HideOne123）
      ####################################################################
      - name: 发布到源仓库
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # 源仓库内置 Token（自动授权）
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}  # 标签名（带 v）
          name: "Release ${{ steps.get_version.outputs.VERSION }}"  # Release 标题
          body: |  # 自动生成发布说明
            **触发方式**：${{ github.event_name == 'workflow_dispatch' && '手动触发' || '标签自动触发' }}  
            **同步目标**：mzsy123/mzsy123.github.io（替换为实际目标仓库）
          files: "release-${{ steps.get_version.outputs.VERSION }}.zip"  # 要上传的资产
          draft: false  # 直接发布，非草稿
          prerelease: false  # 标记为正式版本

      ####################################################################
      # 5. 同步到目标仓库（终极权限修复：显式 PAT 认证 + 内置对象）
      ####################################################################
      - name: 同步到目标仓库（解决权限/变量冲突）
        uses: actions/github-script@v7
        env:
          TARGET_OWNER: "mzsy123"            # 替换为目标仓库所有者（如 GitHub 用户名）
          TARGET_REPO: "mzsy123.github.io"   # 替换为目标仓库名称
          TAG: ${{ steps.get_version.outputs.VERSION }}  # 版本号（带 v）
          ASSET_PATH: "release-${{ steps.get_version.outputs.VERSION }}.zip"  # 打包文件路径
        with:
          github-token: ${{ secrets.TARGET_REPO_PAT }}  # 显式传入 PAT（必须提前配置）
          script: |
            const fs = require('fs').promises;
            const octokit = github.rest;  // 使用内置 octokit（已通过 PAT 认证）

            // ① 查找或创建目标仓库的 Release
            let release;
            try {
              release = await octokit.repos.getReleaseByTag({
                owner: process.env.TARGET_OWNER,
                repo: process.env.TARGET_REPO,
                tag: process.env.TAG
              });
            } catch (err) {
              if (err.status === 404) {
                // 不存在则创建新 Release
                release = await octokit.repos.createRelease({
                  owner: process.env.TARGET_OWNER,
                  repo: process.env.TARGET_REPO,
                  tag_name: process.env.TAG,
                  name: `Sync from HideOne123: ${process.env.TAG}`,
                  body: "此版本自动从 HideOne123 仓库同步发布",
                  draft: false,
                  prerelease: false
                });
              } else {
                core.setFailed(`创建 Release 失败：${err.message}`);
                return;
              }
            }

            // ② 上传资产到目标仓库的 Release
            try {
              const fileContent = await fs.readFile(process.env.ASSET_PATH);
              await octokit.repos.uploadReleaseAsset({
                owner: process.env.TARGET_OWNER,
                repo: process.env.TARGET_REPO,
                release_id: release.data.id,
                name: process.env.ASSET_PATH.split('/').pop(),  // 提取文件名
                data: fileContent,
                headers: {
                  'content-type': 'application/zip',
                  'content-length': fileContent.length
                }
              });
              console.log("✅ 跨仓库同步成功！");
            } catch (err) {
              core.setFailed(`上传资产失败：${err.message}`);
            }

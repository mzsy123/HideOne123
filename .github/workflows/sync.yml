name: Sync to Target Path
on:
  push:
    tags: ['v*']  # 标签触发（如 v1.0.0）
  workflow_dispatch:  # 手动触发
    inputs:
      version:
        description: '版本号（必须带 v 前缀，如 v1.0.0）'
        required: true
        default: 'v1.0.0'


jobs:
  sync:
    runs-on: ubuntu-latest
    env:
      TARGET_OWNER: "mzsy123"          # 目标仓库所有者
      TARGET_REPO: "mzsy123.github.io" # 目标仓库名称
      TARGET_PATH: "target/directory"  # 目标路径（如 zip、public 等）
      TARGET_BRANCH: "main"            # 目标分支（如 main、gh-pages）

    steps:
      - name: 检出源仓库
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: 提取版本号
        id: ver
        run: |
          V=${{ github.event.inputs.version || github.ref_name }}
          [[ $V != v* ]] && echo "::error::版本号必须以 v 开头" && exit 1
          echo "VERSION=$V" >> $GITHUB_OUTPUT

      - name: 打包文件
        run: zip -r "release-${{ steps.ver.outputs.VERSION }}.zip" . -x "*.git*" ".github/" "release-*.zip"
        shell: bash

      - name: 检出目标仓库（PAT 认证）
        uses: actions/checkout@v4
        with:
          repository: ${{ env.TARGET_OWNER }}/${{ env.TARGET_REPO }}
          ref: ${{ env.TARGET_BRANCH }}
          token: ${{ secrets.TARGET_REPO_PAT }}
          path: target_repo

      - name: 禁用 Git 凭证缓存（解决隐式认证冲突）
        run: git config --global credential.helper ""

      - name: 解压到目标路径
        run: |
          mkdir -p target_repo/${{ env.TARGET_PATH }}
          unzip "release-${{ steps.ver.outputs.VERSION }}.zip" -d target_repo/${{ env.TARGET_PATH }}

      - name: 提交并推送（显式 URL + 强校验）
        run: |
          cd target_repo
          # 强制设置远程 URL（和本地测试一致）
          git remote set-url origin https://${{ secrets.TARGET_REPO_PAT }}@github.com/${{ env.TARGET_OWNER }}/${{ env.TARGET_REPO }}.git
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add .
          if git diff --cached --quiet; then
            echo "✅ 无变更"
          else
            git commit -m "Sync: ${{ steps.ver.outputs.VERSION }}"
            git push
            echo "✅ 推送成功！"
          fi
